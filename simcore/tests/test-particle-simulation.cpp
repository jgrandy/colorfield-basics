/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "first-order-simulation.h"#include "generic-objectives-tmpl.h"#include "geo-circle2d.h"#include "matrix-inst.h"#include "matrix-ops-tmpl.h"#include "matrix-io.h"#pragma inline_depth(12)using namespace cf_simcore;using namespace cf_algebra;using std::clog;using std::endl;using std::exception;typedef cf_geocore::circle2d cf_t;typedef first_order_simulation psim_t;int test_particle_simulation(void){	matrixn1 q0(two,one),			 ts(one,one);	const scalar_t start_time = 0.0f,				damping    = 0.3f,				epsilon    = 1.0e-4f,				min_step   = 0.0f,				dt         = 0.5f,				velocity   = 0.0125f;	// create the simulator			psim_t sim(start_time, damping, epsilon, min_step);	const psim_t &csim = sim;	// add the state		identity_vf qp;	generic_vf<identity_vf> gqp(qp);		cf_geocore::circle2d cf(0.0f, 0.0f, 1.0f);		clog << "cf: " << cf << endl;		identity_vf tp;	vf_wrapper<scaled_vf<scalar_t,identity_vf> > scaled_t = adapt_vf(tp) * velocity;	vf_wrapper<composite_vf<cf_t,scaled_vf<scalar_t,identity_vf> > > dcf = adapt_vf(cf)(scaled_t);	generic_vf<composite_vf<cf_t,scaled_vf<scalar_t,identity_vf> > > gdcf(dcf);		q0 = 0.0f;	ts(zero,zero) = start_time;	dcf.apply(q0,1.0f,ts);	const psim_t::q_accessor_t* qf1 = sim.add_state(q0);		clog << "qf1: " << qf1 << endl;	clog << "q: " << sim.state() << endl;		// Set up circle attractor		attractor<matrixn1> attr(0.7f, &gqp, &gdcf);	sim.add_objective(&attr);		// run some simulation steps	scalar_t t = start_time;		try {		for (int i=0; i<400; i++) {			clog << t << ":\tq: " << sim.state();			q0 = 0.0f;			ts(zero,zero) = t;			dcf.apply(q0,1.0f,ts);			clog << "\tcf: " << q0;			clog << endl;						t = sim.step(dt);					// step to meet the constraint		}	} catch (exception &exc) {		clog << "...failed: " << exc.what();	} catch (...) {		clog << "...failed";	}			return 0;}