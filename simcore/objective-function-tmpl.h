/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __OBJECTIVE_FUNCTION_TMPL_H#define __OBJECTIVE_FUNCTION_TMPL_H#include "objective-function.h"namespace cf_simcore {template<class F>stacked_of<F>::~stacked_of(void){	typename functions_t::iterator obj_it = functions_.begin(),						obj_stop = functions_.end();	index_t i = 0;	while (obj_it != obj_stop) {		const F *cnt = *obj_it;//		delete cnt;		++obj_it;	}}template<class F>bool stacked_of<F>::accumulate_dEdqdot(M_t &M, b_t &b, const q_t &q) const{	bool has_objectives = false;		typename functions_t::const_iterator obj_it = functions_.begin(),							  obj_stop = functions_.end();	while (obj_it != obj_stop) {		const F *obj = *obj_it;		++obj_it;		obj->accumulate_dEdqdot(M,b,q);		has_objectives = true;	}		return has_objectives;}template<class F>void stacked_of<F>::update(const time_t &t, const q_t &q){	typename functions_t::iterator obj_it = functions_.begin(),						obj_stop = functions_.end();	while (obj_it != obj_stop) {		F *obj = *obj_it;		++obj_it;		obj->update(t,q);	}}template<class F>void stacked_of<F>::add(F* const of){	functions_.push_front(of);}template<class F>void stacked_of<F>::remove(F* const of){	functions_.remove(of);}} // namespace cf_simcore#endif /* __OBJECTIVE_FUNCTION_TMPL_H */