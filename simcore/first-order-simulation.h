/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __PARTICLE_SIMULATION_H#define __PARTICLE_SIMULATION_H#include "constrained-simulation.h"#include "runge-kutta.h"#include "conjugate-gradient.h"#include "index.h"namespace cf_simcore {/*1.				2.						3.									4.*/class first_order_simulation : public constrained_simulation {	public:							//Types						typedef first_order_simulation	this_t;		typedef constrained_simulation	base_t;		typedef base_t::time_t			time_t;		typedef base_t::q_t				q_t;		typedef base_t::qdot_t			qdot_t;		typedef base_t::C_t				C_t;		typedef base_t::dCdq_t			dCdq_t;							typedef base_t::constraint_t	constraint_t;		typedef base_t::objective_t		objective_t;private:	class system : public derivative_function<q_t,qdot_t> {	public:								// Types										typedef system							this_t;		typedef derivative_function<q_t,qdot_t>	base_t;								typedef base_t::time_t					time_t;		typedef base_t::q_t						q_t;		typedef base_t::qdot_t					qdot_t;		typedef first_order_simulation			simulation_t;								// Constructors																					system(const simulation_t &sim,														   const scalar_t &damping);																virtual		void				apply (qdot_t &qdot, const q_t &q, const time_t &t) const;			virtual		std::ostream&		put(std::ostream &os) const;			protected:				  const simulation_t&	simulation_;						scalar_t			damping_;														private:							typedef C_t::height_t	C_size_t;							void					reset_caches(q_t::height_t q_size, C_size_t c_size) const;														typedef matrix_traits<C_t,C_t::transpose_t>::multiply_t	lhs_t;								mutable			objective_t::M_t*		M_matrix;			mutable			objective_t::M_t*		W_matrix;			mutable			q_t*					b_vector;			mutable			C_t*					C_vector;			mutable			dCdq_t*					J_matrix;			mutable			lhs_t*					lhs_matrix;			mutable			dCdq_t*					JW_matrix;			mutable			C_t*					rhs_vector;			mutable			C_t*					lambda_vector;			mutable			q_t*					JT_lambda_vector;			mutable			conjugate_gradient_solver<lhs_t,C_t,C_t>*	linear_solver_;			};protected:				typedef system					system_t;private:				system_t				system_;	protected:				adaptive_rk4_solver<q_t> solver_;public:					// Construction/Destruction															first_order_simulation(const time_t &initial_time = scalar0,															   const scalar_t &damping = (scalar_t) 0.3,															   const time_t &epsilon = (time_t) 1.0e-4,															   const time_t &min_step = (time_t) 0.0)										  : base_t(&solver_, initial_time),										    system_(*this, damping),										    solver_(system_)										  {										  	solver_.set_epsilon(epsilon);										  	solver_.set_min_step(min_step);										  }										};} // namespace cf_simcore#endif /* __PARTICLE_SIMULATION_H */