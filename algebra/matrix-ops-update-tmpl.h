/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __MATRIX_OPS_UPDATE_TMPL_H#define __MATRIX_OPS_UPDATE_TMPL_H#include "matrix.h"#include "matrix-ops.h"#include "matrix-exceptions.h"#include "matrix-ops-meta-tmpl.h"#include "colorfield-functionals.h"#include "cf-debug.h"namespace cf_algebra {template<class E, class S, class E2, class S2>matrix<E,S>& copy(matrix<E,S> &A, const matrix<E2,S2> &B){	// for some reason, this doesn't inline well with CW Pro 5//	inline_update(binary_ops<scalar_t>::ident_second, A, B);	const typename E::height_t h = A.height();	const typename E::width_t  w = A.width();		AC_PRECONDITION(A.extent() == B.extent());		for (int i=0; i<h; i++) {			typename matrix<E,S>:: row_it_t A_it = A.row_it(i);		typename matrix<E2,S2>::crow_it_t B_it = B.row_it(i);				for (int j=0; j<w; j++) {					scalar_t &A_elt = *A_it;			const scalar_t B_elt = *B_it;			++A_it;			++B_it;						A_elt = binary_ops<scalar_t>::ident_second(A_elt, B_elt);		}	}	return A;}template<class E, class S>matrix<E,S>& fill(matrix<E,S> &A, const scalar_t &val){	inline_update(binary_ops<scalar_t>::ident_second, A, val);	return A;}template<class Extent1, class Structure1, class Extent2, class Structure2>matrix<Extent1,Structure1>& operator+=(      matrix<Extent1,Structure1> &A,									   const matrix<Extent2,Structure2> &B){//	inline_update(binary_ops<scalar_t>::add, A, B);	const typename Extent1::height_t h = A.height();	const typename Extent1::width_t  w = A.width();		AC_PRECONDITION(A.extent() == B.extent());		for (int i=0; i<h; i++) {			typename matrix<Extent1,Structure1>:: row_it_t A_it = A.row_it(i);		typename matrix<Extent2,Structure2>::crow_it_t B_it = B.row_it(i);				for (int j=0; j<w; j++) {					scalar_t &A_elt = *A_it;			const scalar_t B_elt = *B_it;			++A_it;			++B_it;						A_elt = binary_ops<scalar_t>::add(A_elt, B_elt);		}	}	return A;}template<class Extent1, class Structure1, class Extent2, class Structure2>matrix<Extent1,Structure1>& operator-=(      matrix<Extent1,Structure1> &A,									   const matrix<Extent2,Structure2> &B){	inline_update(binary_ops<scalar_t>::subtract, A, B);	return A;}template<class Extent1, class Structure1, class Extent2, class Structure2>matrix<Extent1,Structure1>& operator*=(      matrix<Extent1,Structure1> &A,									   const matrix<Extent2,Structure2> &B){//	inline_update(binary_ops<scalar_t>::multiply, A, B);	const typename Extent1::height_t h = A.height();	const typename Extent1::width_t  w = A.width();		AC_PRECONDITION(A.extent() == B.extent());		for (int i=0; i<h; i++) {			typename matrix<Extent1,Structure1>:: row_it_t A_it = A.row_it(i);		typename matrix<Extent2,Structure2>::crow_it_t B_it = B.row_it(i);				for (int j=0; j<w; j++) {					scalar_t &A_elt = *A_it;			const scalar_t B_elt = *B_it;			++A_it;			++B_it;						A_elt = binary_ops<scalar_t>::multiply(A_elt, B_elt);		}	}	return A;}template<class Extent1, class Structure1, class Extent2, class Structure2>matrix<Extent1,Structure1>& operator/=(      matrix<Extent1,Structure1> &A,										 const matrix<Extent2,Structure2> &B){	inline_update(binary_ops<scalar_t>::divide, A, B);	return A;}template<class Extent, class Structure>matrix<Extent,Structure>& operator+=(      matrix<Extent,Structure> &A,									   const scalar_t &b){	inline_update(binary_ops<scalar_t>::add, A, b);	return A;}template<class Extent, class Structure>matrix<Extent,Structure>& operator-=(      matrix<Extent,Structure> &A,									   const scalar_t &b){	inline_update(binary_ops<scalar_t>::subtract, A, b);	return A;}template<class Extent, class Structure>matrix<Extent,Structure>& operator*=(      matrix<Extent,Structure> &A,									   const scalar_t &b){	inline_update(binary_ops<scalar_t>::multiply, A, b);	return A;}template<class Extent, class Structure>matrix<Extent,Structure>& operator/=(      matrix<Extent,Structure> &A,									   const scalar_t &b){	inline_update(binary_ops<scalar_t>::divide, A, b);	return A;}template<class Extent1, class Structure1, class Extent2, class Structure2>matrix<Extent1,Structure1>& set_diagonal(      matrix<Extent1,Structure1> &x,										   const matrix<Extent2,Structure2> &y){	AC_PRECONDITION(x.width() == x.height());	AC_PRECONDITION(y.width() == y.height());	AC_PRECONDITION(x.height() == y.height());		const typename matrix<Extent1,Structure1>::width_t w = x.width();		for (int i=0; i<w; i++) {		x(i,i) = y(i,i);	}	return x;}															 template<class Extent, class Structure>matrix<Extent,Structure>& set_diagonal(      matrix<Extent,Structure> &x,										 const scalar_t &a){	AC_PRECONDITION(x.width() == x.height());		const typename Extent::width_t w = x.width();		for (int i=0; i<w; i++) {		x(i,i) = a;	}	return x;}template<class Extent, class Structure>matrix<Extent,Structure>& add_diagonal(      matrix<Extent,Structure> &x,										 const scalar_t &a){	AC_PRECONDITION(x.width() == x.height());		const typename Extent::width_t w = x.width();		for (int i=0; i<w; i++) {		x(i,i) += a;	}	return x;}} /* namespace cf_algebra */#endif /* __MATRIX_OPS_UPDATE_TMPL_H */