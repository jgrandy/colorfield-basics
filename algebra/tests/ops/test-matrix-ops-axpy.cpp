/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "matrix-inst.h"#include "matrix-ops.h"#include "matrix-ops-multiply-tmpl.h"using namespace cf_algebra;#pragma inline_depth(10)void test_axpy(void);namespace {	void test_saxpy(void)	{		{			matrixn1 dcm1(3, one),					 dcm2(3, one);											dcm1 = (scalar_t) 1.;						dcm2(0,0) = (scalar_t) 1.;			dcm2(1,0) = (scalar_t) 2.;			dcm2(2,0) = (scalar_t) 3.;						axpy(3.0f, dcm2, 1.0f, dcm1);			FAILNEQ(dcm1(0,0), 1. + (3. * 1.))			FAILNEQ(dcm1(1,0), 1. + (3. * 2.))			FAILNEQ(dcm1(2,0), 1. + (3. * 3.))		}		{			matrixn1 m1(2, one);			matrix1n m2(one, 2);			matrix1n::transpose_t m2_T = m2.transpose();						m1 = (scalar_t) 0.;						m2(0,0) = (scalar_t) 1.;			m2(0,1) = (scalar_t) 0.;						axpy(0.0005f, m2_T, 1.0f, m1);						FAILNEQ(m1(0,0), 0.0005)			FAILNEQ(m1(1,0), 0.)		}	}	void test_gaxpy(void)	{		{			matrixn1 v1(3, one),					 v2(3, one);			matrixn  m1(3, 3);						m1 = (scalar_t) 0.;			m1(0,0) = (scalar_t) 1.;			m1(1,1) = (scalar_t) 1.;			m1(2,2) = (scalar_t) 1.;						v2(0,0) = (scalar_t) 1.;			v2(1,0) = (scalar_t) 2.;			v2(2,0) = (scalar_t) 3.;			v1 = (scalar_t) 1.;							axpy(2.0f, m1, v2, 1.0f, v1);						FAILNEQ(v1(0,0), 1. + (2. * v2(0,0)))			FAILNEQ(v1(1,0), 1. + (2. * v2(1,0)))			FAILNEQ(v1(2,0), 1. + (2. * v2(2,0)))		}	}}void test_axpy(void){	test_saxpy();	test_gaxpy();}