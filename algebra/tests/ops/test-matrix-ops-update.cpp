/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "matrix-inst.h"#include "matrix-ops.h"#include "matrix-ops-update-tmpl.h"using namespace cf_algebra;#pragma inline_depth(12)void test_binary_updaters(void);namespace cf_algebra {template matrixn& operator+=(matrixn&, const matrixn&);template matrixn& operator-=(matrixn&, const matrixn&);template matrixn& operator*=(matrixn&, const matrixn&);template matrixn& operator/=(matrixn&, const matrixn&);template matrixn& operator+=(matrixn&, const scalar_t&);template matrixn& operator-=(matrixn&, const scalar_t&);template matrixn& operator*=(matrixn&, const scalar_t&);template matrixn& operator/=(matrixn&, const scalar_t&);}void test_binary_updaters(void){	matrixn dm1(2,2);		dm1  = 1.0f;		FAILNEQ(dm1(0,0), 1.0f) FAILNEQ(dm1(0,1), 1.0f)	FAILNEQ(dm1(1,0), 1.0f) FAILNEQ(dm1(1,1), 1.0f)		matrixn dm2(2,2);		dm2 = dm1;		FAILNEQ(dm1(0,0), dm2(0,0)) FAILNEQ(dm1(0,1), dm2(0,1))	FAILNEQ(dm1(1,0), dm2(1,0)) FAILNEQ(dm1(1,1), dm2(1,1))			dm1 += 2.0f;	FAILNEQ(dm1(1,0), 3.)			dm1 *= 3.0f;	FAILNEQ(dm1(0,1), 9.)			dm1 /= 2.0f;	FAILNEQ(dm1(1,1), 4.5)		matrixn1 dv1(3,one), dv2(3,one);		dv1 = 1.0f;	dv2(0,0) = 2.0f;	dv2(1,0) = 3.0f;	dv2(2,0) = 4.0f;		dv1 += dv2;	FAILNEQ(dv1(0,0), 3.)	FAILNEQ(dv1(1,0), 4.)	FAILNEQ(dv1(2,0), 5.)			dv1 -= dv2;		dv1 *= dv2;		dv1 /= dv2;	FAILNEQ(dv1(0,0), 1.)	FAILNEQ(dv1(1,0), 1.)	FAILNEQ(dv1(2,0), 1.)			}