/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "matrix-inst.h"#include "matrix-ops-update-tmpl.h"#include "matrix-io.h"#include "cf-debug.h"using namespace cf_algebra;using std::clog;using std::endl;using std::exception;namespace cf_algebra {template class matrix<coord_t<>, dense_structure<> >;template class matrix<coord_t<three_t,two_t>, small_structure<3,2> >;template class matrix<coord_t<two_t,three_t>, small_structure<2,3> >;}namespace {	void test_small_matrix(void)	{		matrix23 m23(two,three);				FAILFALSE(m23.extent() == coord(two,three))				m23(zero,zero) = 1.0f; m23(zero,one) = 2.0f; m23(zero,two) = 3.0f;		m23(one,zero) = 4.0f; m23(one,one) = 5.0f; m23(one,two) = 6.0f;		FAILFALSE(m23(zero,zero) == 1.0f)	FAILFALSE(m23(zero,one) == 2.0f)	FAILFALSE(m23(zero,two) == 3.0f)		FAILFALSE(m23(one,zero) == 4.0f)	FAILFALSE(m23(one,one) == 5.0f)	FAILFALSE(m23(one,two) == 6.0f)		matrix23::transpose_t m23_T(m23.transpose());		FAILFALSE(m23_T.extent() == coord(three,two))						FAILFALSE(m23_T(zero,zero) == m23(zero,zero))	FAILFALSE(m23_T(zero,one) == m23(one,zero))		FAILFALSE(m23_T(one,zero) == m23(zero,one))	FAILFALSE(m23_T(one,one) == m23(one,one))		FAILFALSE(m23_T(two,zero) == m23(zero,two))	FAILFALSE(m23_T(two,one) == m23(one,two))				m23(zero,one) = 24.3f;		FAILFALSE(m23_T(one,zero) == 24.3f)				m23(zero,one) = 2.0f;				matrix23::row_t m23_r0 = m23.row(zero),						m23_r1 = m23.row(one);				FAILFALSE(m23_r0.extent() == coord(one,three))	FAILFALSE(m23_r1.extent() == coord(one,three))				FAILFALSE(m23_r0(zero,zero) == m23(zero,zero))	FAILFALSE(m23_r0(zero,one) == m23(zero,one))	FAILFALSE(m23_r0(zero,two) == m23(zero,two))		FAILFALSE(m23_r1(zero,zero) == m23(one,zero))	FAILFALSE(m23_r1(zero,one) == m23(one,one))	FAILFALSE(m23_r1(zero,two) == m23(one,two))		matrix23::col_t m23_c0 = m23.column(zero),						m23_c1 = m23.column(one),						m23_c2 = m23.column(two);		FAILFALSE(m23_c0.extent() == coord(two,one))	FAILFALSE(m23_c1.extent() == coord(two,one))	FAILFALSE(m23_c2.extent() == coord(two,one))									FAILFALSE(m23_c0(zero,zero) == m23(zero,zero))	FAILFALSE(m23_c1(zero,zero) == m23(zero,one))	FAILFALSE(m23_c2(zero,zero) == m23(zero,two))		FAILFALSE(m23_c0(one,zero) == m23(one,zero))	FAILFALSE(m23_c1(one,zero) == m23(one,one))	FAILFALSE(m23_c2(one,zero) == m23(one,two))		matrix23::transpose_t::row_t m23_T_r0 = m23_T.row(zero),									 m23_T_r1 = m23_T.row(one),									 m23_T_r2 = m23_T.row(two);				FAILFALSE(m23_T_r0.extent() == coord(one,two))	FAILFALSE(m23_T_r1.extent() == coord(one,two))	FAILFALSE(m23_T_r2.extent() == coord(one,two))									FAILFALSE(m23_T_r0(zero,zero) == m23(zero,zero))	FAILFALSE(m23_T_r1(zero,zero) == m23(zero,one))	FAILFALSE(m23_T_r2(zero,zero) == m23(zero,two))		FAILFALSE(m23_T_r0(zero,one) == m23(one,zero))	FAILFALSE(m23_T_r1(zero,one) == m23(one,one))	FAILFALSE(m23_T_r2(zero,one) == m23(one,two))		matrix23::transpose_t::col_t m23_T_c0 = m23_T.column(zero),									 m23_T_c1 = m23_T.column(one);				FAILFALSE(m23_T_c0.extent() == coord(three,one))	FAILFALSE(m23_T_c1.extent() == coord(three,one))				FAILFALSE(m23_T_c0(zero,zero) == m23(zero,zero))	FAILFALSE(m23_T_c0(one,zero) == m23(zero,one))	FAILFALSE(m23_T_c0(two,zero) == m23(zero,two))		FAILFALSE(m23_T_c1(zero,zero) == m23(one,zero))	FAILFALSE(m23_T_c1(one,zero) == m23(one,one))	FAILFALSE(m23_T_c1(two,zero) == m23(one,two))		FAILFALSE(m23(zero,zero) == 1.0f)	FAILFALSE(m23(zero,one) == 2.0f)	FAILFALSE(m23(zero,two) == 3.0f)		FAILFALSE(m23(one,zero) == 4.0f)	FAILFALSE(m23(one,one) == 5.0f)	FAILFALSE(m23(one,two) == 6.0f)		matrix_traits<matrix23,range_t<> >::rows_t m23_r02 = m23.rows(range_t<>(zero,two));		FAILFALSE(m23_r02.extent() == coord(two,three))						FAILFALSE(m23_r02(zero,zero) == 1.0f)	FAILFALSE(m23_r02(zero,one) == 2.0f)	FAILFALSE(m23_r02(zero,two) == 3.0f)		FAILFALSE(m23_r02(one,zero) == 4.0f)	FAILFALSE(m23_r02(one,one) == 5.0f)	FAILFALSE(m23_r02(one,two) == 6.0f)	}		void test_dense_matrix(void)	{		matrixn m23(two,three);				FAILFALSE(m23.extent() == coord(two,three))				m23(zero,zero) = 1.0f; m23(zero,one) = 2.0f; m23(zero,two) = 3.0f;		m23(one,zero) = 4.0f; m23(one,one) = 5.0f; m23(one,two) = 6.0f;		FAILFALSE(m23(0,0) == 1.0f) FAILFALSE(m23(0,1) == 2.0f)	FAILFALSE(m23(0,2) == 3.0f)		FAILFALSE(m23(1,0) == 4.0f)	FAILFALSE(m23(1,1) == 5.0f)	FAILFALSE(m23(1,2) == 6.0f)		matrixn::transpose_t m23_T(m23.transpose());				FAILFALSE(m23_T.extent() == coord(three,two))						FAILFALSE(m23_T(0,0) == m23(0,0))	FAILFALSE(m23_T(0,1) == m23(1,0))		FAILFALSE(m23_T(1,0) == m23(0,1))	FAILFALSE(m23_T(1,1) == m23(1,1))		FAILFALSE(m23_T(2,0) == m23(0,2))	FAILFALSE(m23_T(2,1) == m23(1,2))				matrixn::row_t m23_r0(m23, zero, row_axis),					   m23_r1(m23, one, row_axis);				FAILFALSE(m23_r0.extent() == coord(one,three))	FAILFALSE(m23_r1.extent() == coord(one,three))				FAILFALSE(m23_r0(0,0) == m23(0,0))	FAILFALSE(m23_r0(0,1) == m23(0,1))	FAILFALSE(m23_r0(0,2) == m23(0,2))		FAILFALSE(m23_r1(0,0) == m23(1,0))	FAILFALSE(m23_r1(0,1) == m23(1,1))	FAILFALSE(m23_r1(0,2) == m23(1,2))				FAILFALSE(m23_r0[0] == m23(0,0))	FAILFALSE(m23_r0[1] == m23(0,1))	FAILFALSE(m23_r0[2] == m23(0,2))		FAILFALSE(m23_r1[0] == m23(1,0))	FAILFALSE(m23_r1[1] == m23(1,1))	FAILFALSE(m23_r1[2] == m23(1,2))				matrixn::col_t m23_c0(m23, zero, column_axis),					   m23_c1(m23, one, column_axis),					   m23_c2(m23, two, column_axis);										FAILFALSE(m23_c0.extent() == coord(two,one))	FAILFALSE(m23_c1.extent() == coord(two,one))	FAILFALSE(m23_c2.extent() == coord(two,one))									FAILFALSE(m23_c0(0,0) == m23(0,0))	FAILFALSE(m23_c1(0,0) == m23(0,1))	FAILFALSE(m23_c2(0,0) == m23(0,2))		FAILFALSE(m23_c0(1,0) == m23(1,0))	FAILFALSE(m23_c1(1,0) == m23(1,1))	FAILFALSE(m23_c2(1,0) == m23(1,2))		FAILFALSE(m23_c0[0] == m23(0,0))	FAILFALSE(m23_c1[0] == m23(0,1))	FAILFALSE(m23_c2[0] == m23(0,2))		FAILFALSE(m23_c0[1] == m23(1,0))	FAILFALSE(m23_c1[1] == m23(1,1))	FAILFALSE(m23_c2[1] == m23(1,2))		matrixn::transpose_t::row_t m23_T_r0(m23_T, zero, row_axis),									m23_T_r1(m23_T, one, row_axis),									m23_T_r2(m23_T, two, row_axis);				FAILFALSE(m23_T_r0.extent() == coord(one,two))	FAILFALSE(m23_T_r1.extent() == coord(one,two))	FAILFALSE(m23_T_r2.extent() == coord(one,two))									FAILFALSE(m23_T_r0(0,0) == m23(0,0))	FAILFALSE(m23_T_r0(0,1) == m23(1,0))		FAILFALSE(m23_T_r1(0,0) == m23(0,1))	FAILFALSE(m23_T_r1(0,1) == m23(1,1))		FAILFALSE(m23_T_r2(0,0) == m23(0,2))	FAILFALSE(m23_T_r2(0,1) == m23(1,2))				FAILFALSE(m23_T_r0[0] == m23(0,0))	FAILFALSE(m23_T_r0[1] == m23(1,0))		FAILFALSE(m23_T_r1[0] == m23(0,1))	FAILFALSE(m23_T_r1[1] == m23(1,1))		FAILFALSE(m23_T_r2[0] == m23(0,2))	FAILFALSE(m23_T_r2[1] == m23(1,2))				matrixn::transpose_t::col_t m23_T_c0(m23_T, zero, column_axis),									m23_T_c1(m23_T, one, column_axis);				FAILFALSE(m23_T_c0.extent() == coord(three,one))	FAILFALSE(m23_T_c1.extent() == coord(three,one))				FAILFALSE(m23_T_c0(0,0) == m23(0,0))	FAILFALSE(m23_T_c0(1,0) == m23(0,1))	FAILFALSE(m23_T_c0(2,0) == m23(0,2))		FAILFALSE(m23_T_c1(0,0) == m23(1,0))	FAILFALSE(m23_T_c1(1,0) == m23(1,1))	FAILFALSE(m23_T_c1(2,0) == m23(1,2))		FAILFALSE(m23_T_c0[0] == m23(0,0))	FAILFALSE(m23_T_c0[1] == m23(0,1))	FAILFALSE(m23_T_c0[2] == m23(0,2))		FAILFALSE(m23_T_c1[0] == m23(1,0))	FAILFALSE(m23_T_c1[1] == m23(1,1))	FAILFALSE(m23_T_c1[2] == m23(1,2))		matrix_traits<matrixn,range_t<> >::rows_t m23_r02(m23,range(zero,two), row_axis);		FAILFALSE(m23_r02.extent() == coord(two,three))					}	} // namespacevoid test_small_iterators(void);void test_dense_iterators(void);void test_dense_transpose_iterators(void);int test_core(void){    clog << "testing algebra core" << endl;	try {		clog << "testing small matrices..." << endl;		test_small_matrix();		clog << "...succeeded!" << endl;	} catch(exception &exc) {		clog << "...failed! " << exc.what() << endl;	} catch(...) {		clog << "...failed!" << endl;	}		try {		clog << "testing dense matrices..." << endl;		test_dense_matrix();		clog << "...succeeded!" << endl;	} catch(exception &exc) {		clog << "...failed! " << exc.what() << endl;	} catch(...) {		clog << "...failed!" << endl;	}		try {		clog << "testing small iterators..." << endl;		test_small_iterators();		clog << "...succeeded!" << endl;	} catch(exception &exc) {		clog << "...failed! " << exc.what() << endl;	} catch(...) {		clog << "...failed!" << endl;	}		try {		clog << "testing dense iterators..." << endl;		test_dense_iterators();		clog << "...succeeded!" << endl;	} catch(exception &exc) {		clog << "...failed! " << exc.what() << endl;	} catch(...) {		clog << "...failed!" << endl;	}		try {		clog << "testing dense transpose iterators..." << endl;		test_dense_transpose_iterators();		clog << "...succeeded!" << endl;	} catch(exception &exc) {		clog << "...failed! " << exc.what() << endl;	} catch(...) {		clog << "...failed!" << endl;	}		return 0;}