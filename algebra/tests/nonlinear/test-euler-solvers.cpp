/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "test-nonlinear-solvers-tmpl.h"#include "euler.h"#include "euler.tmpl.h"#include "matrix-inst.h"#include <math.h>#pragma inline_depth(12)using namespace cf_algebra;using std::clog;using std::endl;using std::exception;using std::cerr;// == Solvers ==typedef midpoint_solver<cvector2> midpoint_problem;typedef circle_function<cvector2> circle_t;int test_euler_solvers(void){	clog << endl << "Testing Midpoint" << endl;		try {		circle_t cf;		midpoint_problem mp(cf);				scalar_t t0 = 0.0f;		cvector2 q0(two,one,init_zero);		q0(0,0) = 0.0f;		q0(1,0) = 1.0f;				mp.set_state1(t0, q0);				test_solver(mp,1000,(scalar_t)0.001,false);	} catch (exception &exc) {		cerr << "...failed: " << exc.what() << endl;	}	clog << "done." << endl;	return 0;}