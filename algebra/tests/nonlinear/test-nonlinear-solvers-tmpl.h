/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __TEST_NONLINEAR_SOLVERS_TMPL_H#define __TEST_NONLINEAR_SOLVERS_TMPL_H#include "nonlinear-solver.h"#include "derivative-function.h"#include "matrix-ops-tmpl.h"#include "matrix-io.h"#include <iostream>using std::clog;using std::endl;namespace cf_algebra {// == Circle ==template<class Q, class Qdot = Q> class circle_function : public derivative_function<Q,Qdot> {			scalar_t					radius_, cx_, cy_, t_offset_;public:			typedef circle_function<Q,Qdot>		his_t;			typedef derivative_function<Q,Qdot>	base_t;			typedef typename base_t::time_t					time_t;			typedef typename base_t::q_t						q_t;			typedef typename base_t::qdot_t					qdot_t;			virtual		void				apply (qdot_t &qdot, const q_t &q, const time_t &t) const;virtual		std::ostream&		put(std::ostream &os) const;};template<class Q, class Qdot>void circle_function<Q,Qdot>::apply(qdot_t &qdot, const q_t &q, const time_t &) const{	qdot(0,0) =   q(1,0);	qdot(1,0) = - q(0,0);}template<class Q, class Qdot>std::ostream& circle_function<Q,Qdot>::put(std::ostream &os) const{	return (os << "circle");}template<class Q>void test_solver(nonlinear_solver<Q> &s, 				 int num_steps, const scalar_t &stepsize, bool verbose = false){	typedef nonlinear_solver<Q>	solver_t;	typedef typename solver_t::time_t		time_t;	typedef typename solver_t::q_t			q_t;	typedef typename solver_t::qdot_t		qdot_t;			const time_t step1 = stepsize, 	      		 step2 = (time_t) (step1 / 2);	const int num_steps2 = num_steps*2;		const typename q_t::height_t n = s.get_state_size();	time_t    t0,t1,t2;	q_t       q0(n,one);	qdot_t qdot0(n,one);	t0 = s.get_time();	q0 = s.get_state();	qdot0 = s.get_deriv();	s.suggest_step_size(step1);		if (verbose) {		clog << "initial time:  " << t0    << endl;		clog << "initial state: " << q0    << endl;		clog << "initial deriv: " << qdot0 << endl << endl;	}		for (int i=0; i<num_steps; i++) {		t1 = s.step();		if (verbose) {			clog << "t = " << t1 << endl;			clog << "q = " << s.get_state() << endl;			clog << "qdot = " << s.get_deriv() << endl;			clog << endl;		}	}	q_t q1(n,one);	q1 = s.get_state();		s.set_state(t0, q0, qdot0);		s.suggest_step_size(step2);	for (int i=0; i<num_steps2; i++) {		t2 = s.step();	}	q_t q2(n,one);	q2 = s.get_state();		clog << "actual result          : " << q1 << endl;	clog << "norm                   : " << norm_p2(q1) << endl;	clog << "actual result (doubled): " << q2 << endl;	clog << "norm                   : " << norm_p2(q2) << endl;}} /* namespace cf_algebra */#endif /* __TEST_NONLINEAR_SOLVERS_TMPL_H */