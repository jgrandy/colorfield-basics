/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1995 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "matrix-ops.h"#include "matrix-ops-update-tmpl.h"#include "matrix-ops-preds-tmpl.h"#include "matrix-ops-multiply-tmpl.h"#include "matrix-inst.h"#pragma inline_depth(10)namespace cf_algebra {template matrixn&  copy(matrixn&,  const matrixn&);template matrixn1& copy(matrixn1&, const matrixn1&);template matrixn&  fill(matrixn&,  const scalar_t&);template matrixn1& fill(matrixn1&, const scalar_t&);template scalar_t     norm_maxabs(const matrixn&);template scalar_t     norm_maxabs(const matrixn1&);template scalar_t	   norm_p2    (const matrixn1&);template matrixn1& operator-=(matrixn1&, const matrixn1&);template matrixn1& operator+=(matrixn1&, const matrixn1&);template matrixn1& operator*=(matrixn1&, const scalar_t&);template matrixn1& operator*=(matrixn1&, const matrixn1&);template matrixn&  matrix_multiply(matrixn&,  const matrixn&,    const matrixn &);template matrixn1& matrix_multiply(matrixn1&, const matrixn&,    const matrixn1&);template scalar_t&    matrix_multiply(scalar_t&,    const matrixn1_T&, const matrixn1&);template scalar_t&    matrix_multiply(scalar_t&,    const matrix1n&,   const matrix1n::transpose_t&);//template scalar_t    &matrix_multiply(scalar_t   &,matrixn::row_t&,matrixn::col_t &);template matrixn1& axpy(const scalar_t&, const matrixn1&, const scalar_t&, matrixn1&);template matrixn1& axpy(const scalar_t&, const matrixn&,  const matrixn1&, const scalar_t&, matrixn1&);//template matrixn  &matrix_multiply_upper_lower(matrixn&,matrixn::transpose_t&,matrixn&);//template matrixn  &set_diagonal(matrixn &,const matrixn::col_t&);template matrixn  &set_diagonal(matrixn &,const scalar_t&);} /* cf_algebra */