/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __LINEAR_SOLVER_H#define __LINEAR_SOLVER_H#include "matrix.h"#include "dense-structure.h"namespace cf_algebra {template<class A, class X, class B> class linear_solver {public:					typedef linear_solver<A,X,B>	this_t;													typedef A						A_t;					typedef X						x_t;					typedef B						b_t;					typedef typename A::width_t				size_t;explicit							linear_solver(size_t problem_size) 	: n_(problem_size) {}									linear_solver(const this_t& ls)	: n_(ls.n_) {}													size_t			problem_size(void) const		{ return n_; }virtual				void			solve(const A_t &a, x_t &x, const b_t &b) = 0;virtual				void			invert(A_t &a_inv, A_t &a) = 0;protected:			  const size_t			n_;};} /* namespace cf_algebra */#endif /* __LINEAR_SOLVER_H */