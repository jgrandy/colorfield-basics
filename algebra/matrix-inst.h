/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __MATRIX_INST_H#define __MATRIX_INST_H#include "dense-structure.h"#include "matrix.h"namespace cf_algebra {typedef matrix<coord_t<>, dense_structure<index_t> >				matrixn;typedef matrixn::transpose_t 										matrixn_T;typedef matrix<coord_t<one_t,index_t>, dense_structure<index_t> >	matrix1n;typedef matrix1n::transpose_t										matrix1n_T;typedef matrix<coord_t<index_t,one_t>, dense_structure<one_t> >		matrixn1;typedef matrixn1::transpose_t										matrixn1_T;template<index_t R, index_t C> class small_matrices {public:	typedef coord_t<cindex<R>,cindex<C> >							extent_t;	typedef matrix<extent_t, small_structure<R,C> >					matrixn;	typedef typename matrixn::transpose_t 									matrixn_T;};typedef small_matrices<1,1>::matrixn								matrix11;typedef small_matrices<1,1>::matrixn_T								matrix11_T;typedef small_matrices<1,2>::matrixn								matrix12;typedef small_matrices<1,2>::matrixn_T								matrix12_T;typedef small_matrices<1,3>::matrixn								matrix13;typedef small_matrices<1,3>::matrixn_T								matrix13_T;typedef small_matrices<1,4>::matrixn								matrix14;typedef small_matrices<1,4>::matrixn_T								matrix14_T;typedef small_matrices<2,1>::matrixn								matrix21;typedef small_matrices<2,1>::matrixn_T								matrix21_T;typedef small_matrices<2,2>::matrixn								matrix22;typedef small_matrices<2,2>::matrixn_T								matrix22_T;typedef small_matrices<2,3>::matrixn								matrix23;typedef small_matrices<2,3>::matrixn_T								matrix23_T;typedef small_matrices<2,4>::matrixn								matrix24;typedef small_matrices<2,4>::matrixn_T								matrix24_T;typedef small_matrices<3,1>::matrixn								matrix31;typedef small_matrices<3,1>::matrixn_T								matrix31_T;typedef small_matrices<3,2>::matrixn								matrix32;typedef small_matrices<3,2>::matrixn_T								matrix32_T;typedef small_matrices<3,3>::matrixn								matrix33;typedef small_matrices<3,3>::matrixn_T								matrix33_T;typedef small_matrices<3,4>::matrixn								matrix34;typedef small_matrices<3,4>::matrixn_T								matrix34_T;typedef small_matrices<4,1>::matrixn								matrix41;typedef small_matrices<4,1>::matrixn_T								matrix41_T;typedef small_matrices<4,2>::matrixn								matrix42;typedef small_matrices<4,2>::matrixn_T								matrix42_T;typedef small_matrices<4,3>::matrixn								matrix43;typedef small_matrices<4,3>::matrixn_T								matrix43_T;typedef small_matrices<4,4>::matrixn								matrix44;typedef small_matrices<4,4>::matrixn_T								matrix44_T;template<class N> class vectors {public:		// column vector and its transpose	typedef matrix<coord_t<N, one_t>, dense_structure<one_t> >		cvector;	typedef typename cvector::transpose_t									cvector_T;		// row vector and its transpose		typedef matrix<coord_t<one_t, N>, dense_structure<N> >			rvector;	typedef typename rvector::transpose_t									rvector_T;	};template<index_t N> class vectors<cindex<N> > {public:		// column vector and its transpose	typedef matrix<coord_t<cindex<N>, one_t>, small_structure<N,1> >	cvector;	typedef typename cvector::transpose_t										cvector_T;		// row vector and its transpose		typedef matrix<coord_t<one_t, cindex<N> >, small_structure<1,N> >	rvector;	typedef typename rvector::transpose_t										rvector_T;	};typedef vectors<index_t>::cvector									cvector;typedef vectors<index_t>::cvector_T									cvector_T;typedef vectors<index_t>::rvector									rvector;typedef vectors<index_t>::rvector_T									rvector_T;typedef vectors<one_t>::cvector										cvector1;typedef vectors<one_t>::cvector_T									cvector1_T;typedef vectors<one_t>::rvector										rvector1;typedef vectors<one_t>::rvector_T									rvector1_T;typedef vectors<two_t>::cvector										cvector2;typedef vectors<two_t>::cvector_T									cvector2_T;typedef vectors<two_t>::rvector										rvector2;typedef vectors<two_t>::rvector_T									rvector2_T;typedef vectors<three_t>::cvector									cvector3;typedef vectors<three_t>::cvector_T									cvector3_T;typedef vectors<three_t>::rvector									rvector3;typedef vectors<three_t>::rvector_T									rvector3_T;typedef vectors<four_t>::cvector									cvector4;typedef vectors<four_t>::cvector_T									cvector4_T;typedef vectors<four_t>::rvector									rvector4;typedef vectors<four_t>::rvector_T									rvector4_T;} // namespace cf_algebra#endif /* __MATRIX_INST_H */