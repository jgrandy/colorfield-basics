/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __CONJUGATE_GRADIENT_H#define __CONJUGATE_GRADIENT_H#include "linear-solver.h"namespace cf_algebra {template<class A, class X, class B> class conjugate_gradient_solver : linear_solver<A,X,B> {public:			typedef conjugate_gradient_solver<A,X,B>	this_t;			typedef linear_solver<A,X,B>				base_t;			typedef typename base_t::A_t			A_t;			typedef typename base_t::x_t			x_t;			typedef typename base_t::b_t			b_t;			typedef typename base_t::size_t		size_t;			explicit					conjugate_gradient_solver(size_t n,													  index_t max_iterations = 1000,													  double tolerance = 1.e-7)											: base_t(n),								  max_it_(max_iterations), stop_tol_(tolerance),								  p_(n,one),q_(n,one),residual_(n,one),z_(n,one),								  Minv_(n,one),								  iterations_(0)								  {}virtual		void			solve(const A_t &a, x_t &x, const b_t &b);virtual		void			invert(A_t &m_inv, A_t &m);private:						// stopping criteria									index_t			max_it_;			double			stop_tol_;									// pre-allocated stores						b_t				p_, q_, residual_, z_;			b_t				Minv_;							// instrumentation									index_t			iterations_;};} /* namespace cf_algebra */#endif /* __CONJUGATE_GRADIENT_H */