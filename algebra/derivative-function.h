/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __DERIVATIVE_FUNCTION_H#define __DERIVATIVE_FUNCTION_H#include "matrix.h"namespace cf_algebra {template<class Q, class Qdot = Q> class derivative_function {	// A derivative function is a function used to compute the derivative	// of an unknown parametric function, given t and f(t). That is,	//	//   xdot = f(x, t)	//public:			typedef derivative_function<Q,Qdot>	this_t;						typedef scalar_t			time_t;			typedef Q					q_t;			typedef Qdot				qdot_t;virtual		void				apply (qdot_t &qdot, const q_t &q, const time_t &t) const = 0;virtual		std::ostream&		put(std::ostream &os) const = 0;friend		std::ostream&		operator<<(std::ostream &os, const this_t &vf)				{ return vf.put(os); }};} // namespace cf_algebra#endif /* __DERIVATIVE_FUNCTION_H */