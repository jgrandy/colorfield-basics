/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __MATRIX_IO_H#define __MATRIX_IO_H#include "matrix.h"#include <iostream>namespace cf_algebra {template<class Extent, class Structure>std::ostream &operator<<(std::ostream &os, const matrix<Extent,Structure>& v){	os << "{ ";		const index_t n = v.height();	if (n > 0) {		os << v.row(0);		for (int i=1; i<n; i++)			os << " " << v.row((index_t)i);	}	os << " }";		return os;}template<class R, class Structure>std::ostream &operator<<(std::ostream &os, const matrix<coord_t<R,one_t>,Structure>& v){	os << "{ ";		const index_t n = v.height();	if (n > 0) {		os << v(0,0);		for (int i=1; i<n; i++)			os << ", " << v(0,(index_t) i);	}	os << " }T";		return os;}template<class C, class Structure>std::ostream &operator<<(std::ostream &os, const matrix<coord_t<one_t,C>,Structure>& v){	os << "[ ";		const index_t n = v.width();	if (n > 0) {		os << v(0,0);			for (int i=1; i<n; i++)			os << ", " << v(0,i);	}	os << " ]";		return os;}// this is necessary to avoid an "ambiguous access to overloaded function" error with the previous two functions// if a 1x1 matrix is output.template<class Structure>std::ostream &operator<<(std::ostream &os, const matrix<coord_t<one_t,one_t>,Structure>& v){	os << "{ " << v(0,0) << " }";	return os;}} /* cf_algebra */#endif /* __MATRIX_IO_H */