/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __CF_DEBUG_H#define __CF_DEBUG_H//#include "cf-abstract-platform.h"#include <cassert>#include <stdexcept>#include <string>namespace cf_debug {static bool verbose_debugging = true;void fail(const char* msg);void fail(const char* msg, int line);#define FAIL(msg)       if (true) cf_debug::fail(msg, __LINE__);#define FAILTRUE(expr)  if (expr) cf_debug::fail(#expr, __LINE__);#define FAILFALSE(expr) if (!(expr)) cf_debug::fail("! (" #expr ")", __LINE__);#define FAILNEQ(op,v)   if (fabs((op) - (v)) > 0.00001) cf_debug::fail(#op " != " #v, __LINE__);#define AC_PRECONDITION(expr) FAILFALSE(expr)#define AC_POSTCONDITION(expr) FAILFALSE(expr)    const bool strict_checking = true;const bool check_preconditions = strict_checking && true,		   check_postconditions = strict_checking && true,		   check_assertions = strict_checking && true;		   const bool debugging_support = false;class assertion_failed : public std::logic_error {public :		explicit assertion_failed(const std::string& what_arg) : std::logic_error(what_arg) {}};#if DEBUG#define CF_PRECONDITION(expr)  if (cf_debug::check_preconditions)  if (! (expr)) throw cf_debug::assertion_failed("precondition failed in " __FILE__ ": " #expr);#define CF_POSTCONDITION(expr) if (cf_debug::check_postconditions) if (! (expr)) throw cf_debug::assertion_failed("postcondition failed in " __FILE__ ": " #expr);#define CF_ASSERTION(expr)     if (cf_debug::check_assertions)     if (! (expr)) throw cf_debug::assertion_failed("assertion failed in " __FILE__ ": " #expr);#else#define CF_PRECONDITION(expr)  #define CF_POSTCONDITION(expr) #define CF_ASSERTION(expr)     #endif} // namespace cf_debug#endif /* __CF_DEBUG_H */