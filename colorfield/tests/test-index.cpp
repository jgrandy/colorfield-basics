/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "index.h"#include "cf-debug.h"using namespace colorfield;void test_comp(void);typedef index_traits<three_t, three_t >::sum_t six_t;const six_t six = cindex<6>();const six_t six_also = three_t() + three_t();const one_t three_minus_two = three_t() - two_t();typedef index_traits<three_t,six_t>::sum_t nine_t;//TODO: add reordering tests//typedef reordering<1,3,2,0>::binary_traits<reordering<2,0,1,3> >::collapsed reorder2130_t;void test_comp(void){	FAILFALSE(one_t() == one_t())	FAILFALSE(one_t() >  zero_t())	FAILFALSE(zero_t() < one_t())	FAILFALSE(zero_t() + one_t() == one_t())	FAILFALSE(three_t() - one_t() == two_t())		FAILFALSE(one_t() * zero_t() == zero_t())	FAILFALSE(one_t() * two_t() == two_t())		FAILFALSE(four_t() / two_t() == two_t())	FAILFALSE(std::max<std::uint16_t>(one_t(), zero_t()) == one_t())	FAILFALSE(std::min<std::uint16_t>(one_t(), zero_t()) == zero_t())	FAILFALSE(nine_t() == 9)		//FAILFALSE(reorder2130_t::reorder(zero ) == two)	//FAILFALSE(reorder2130_t::reorder(one  ) == one)	//FAILFALSE(reorder2130_t::reorder(two  ) == three)	//FAILFALSE(reorder2130_t::reorder(three) == zero)}