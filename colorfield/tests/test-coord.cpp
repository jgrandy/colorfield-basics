/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#pragma warn_notinlined on#include "coord.h"#include "cf-debug.h"#include <iostream>using namespace colorfield;using std::clog;using std::endl;#define CCOORD(R,C) coord_t<cindex<R>, cindex<C> >(cindex<R>(),cindex<C>())void test_coord(void);void test_ccoord(void);void test_ccoord(void){	FAILTRUE(CCOORD(1,2).row() != 1)	FAILTRUE(CCOORD(1,2).column() != 2)	FAILTRUE(CCOORD(1,2) != CCOORD(1,2))	FAILTRUE(CCOORD(1,2) == CCOORD(2,1))	const coord_t<two_t,one_t> ct12_1 = CCOORD(1,2).transpose(),						ct12_2(CCOORD(1,2).transpose());		FAILFALSE(ct12_1 == ct12_2)	FAILTRUE(ct12_1 == CCOORD(1,2))	FAILTRUE(ct12_2 == CCOORD(1,2))	FAILFALSE(ct12_1 == CCOORD(2,1))		const coord_t<one_t,zero_t> c10_1 = CCOORD(1,0);	FAILFALSE(c10_1 == CCOORD(1,0))	FAILFALSE(CCOORD(1,2).area() == 2)}void test_coord(void){	const coord_t<index_t,index_t> c1(1,2), c2(2,1), c3(0,1), c4(1,0);	FAILFALSE(c1.row() == 1)	FAILFALSE(c1.column() == 2)	FAILFALSE(c1 == c1)	FAILFALSE(c1 != c2)		const coord_t<index_t,index_t> ct1 = c1.transpose(),	              ct2(c1.transpose());	FAILFALSE(ct1 == ct2)	FAILTRUE(ct1 == c1)	FAILTRUE(ct2 == c1)	FAILFALSE(ct1 == c2)	const coord_t<index_t,index_t> c5 = c4;	FAILFALSE(c5 == c4)	const coord_t<index_t,index_t> c6 = c2 - one_t();	FAILFALSE(c6 == c4)}