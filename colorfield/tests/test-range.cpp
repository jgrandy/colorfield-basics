/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#pragma warn_notinlined on#include "range.h"#include "cf-debug.h"using namespace colorfield;void test_crange(void);void test_range(void);#pragma inline_depth(10)typedef range_t<zero_t,one_t> range01;typedef range_t<zero_t,three_t> range03;typedef range_t<one_t,one_t> range11;typedef range_t<one_t,two_t> range12;typedef range_t<one_t,three_t> range13;typedef range_t<two_t,two_t> range22;typedef range_t<two_t,three_t> range23;range01 r01(zero, one);range03 r03(zero, three);range11 r11(one,  one);range12 r12(one,  two);range13 r13(one,  three);range22 r22(two,  two);range23 r23(two,  three);void test_crange(void){//	clog << "sizeof(range01) == " << sizeof(range01) << endl;//	clog << "sizeof(range0c) == " << sizeof(range_t<zero_t,index_t>) << endl;		FAILFALSE(r01 == r01)	FAILTRUE (r03 == r12)		FAILFALSE((r03 + one) == r13)	FAILFALSE((r23 - one) == r13)		FAILFALSE(r12.contains(one))	FAILTRUE (r12.contains(zero))	FAILTRUE (r12.contains(three))		FAILFALSE(r03.contains(zero))	FAILFALSE(r03.contains(one))	FAILTRUE (r03.contains(three))		FAILFALSE(r22.map_out(one)   == three)	FAILFALSE(r22.map_in (three) == one)	FAILFALSE(r03.inset (one) == r11);	FAILFALSE(r11.outset(one) == r03);}void test_range(void){		const range_t<index_t,index_t> r1(0,2), r2(1,2), r3(1,3), r4(2,0);				FAILFALSE(r1.start() == 0)		FAILFALSE(r1.length() == 2)				FAILTRUE (r1.empty())		FAILFALSE(r4.empty())				FAILFALSE(r1 == r1)		FAILTRUE (r1 != r1)		FAILTRUE (r1 == r2)		FAILFALSE(r1 != r2)			FAILFALSE((r1 + one) == r2)		FAILFALSE((r2 - one) == r1)		FAILFALSE(r3.outset(one) == (range_t<index_t,index_t>(0,5)))		FAILFALSE(r3.inset (one) == (range_t<index_t,index_t>(2,1)))				range_t<> r5 = r1;				FAILFALSE(r5 == r1)}