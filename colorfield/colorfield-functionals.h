/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __COLORFIELD_FUNCTIONALS_H#define __COLORFIELD_FUNCTIONALS_H#include "colorfield.h"#include <algorithm>namespace colorfield {template <class T>struct reduction_ops {static	T		maxabs(const T &a, const T &b)				{ return std::max(a, (const T) std::fabs(b)); }static	T		p2(const T &a, const T &b)					{ return a + (b * b); }static	bool	equal(bool a, const std::pair<T,T> b)		{ return a && (b.first == b.second); }static	bool	not_equal(bool a, const std::pair<T,T> b)	{ return a || (b.first != b.second); }static	bool	is_nan(bool a, const T f)					{ return a || (isnan(f)); }};template<class T>struct binary_ops {static		T		ident_first(const T a, const T)	 { return a; }static		T		ident_second(const T, const T b) { return b; }static		T		recip_first(const T a, const T)	 { return 1 / a; }static		T		recip_second(const T, const T b) { return 1 / b; }static		T		add(const T a, const T b)		 { return (a + b); }static		T		subtract(const T a, const T b)	 { return (a - b); }static		T		multiply(const T a, const T b)	 { return (a * b); }static		T		divide(const T a, const T b)	 { return (a / b); }};} /* namespace colorfield */#endif /* __COLORFIELD_FUNCTIONALS_H */