/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 2000 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "geo-space.h"namespace cf_geocore {vector_space::~vector_space(void){    try {        this->remove_from_system();    } catch (system::entity_not_found &exc) {        // ignore    }        }void vector_space::initialize(const vector_space *basis){	basis_ = basis;	system *sys = basis->get_system();	if (sys != nil)		this->add_to_system(sys);}void vector_space::initialize(system *sys){	if (sys != nil)		this->add_to_system(sys);}space_id_t vector_space::add_to_system(system *sys){	AC_PRECONDITION(sys_ == nil)	sys_ = sys;	if (basis_ == nil) {		id_ = sys->add_space(this->dimensions(), this->space_type());	} else {		AC_PRECONDITION(basis_->get_system() == sys)		const vector_function *from_basis = this->create_direct_transform_from_basis(basis_),							    *to_basis = this->create_direct_transform_to_basis(basis_);        if (from_basis != nil && to_basis != nil)            id_ = sys->add_space(this->dimensions(), basis_->get_id(), from_basis, to_basis, this->space_type());        else            std::clog << "basis not created" << std::endl;	}	return id_;}void vector_space::remove_from_system(void){	if (sys_ != nil) {		sys_->remove_space(this);		sys_ = nil;		id_ = nil;	}}bool vector_space::has_direct_transform_to_basis(const vector_space *basis) const{	if ((basis_ != nil) && (basis == basis_))		return true;	else		return false;}bool vector_space::has_direct_transform_from_basis(const vector_space *basis) const{	if ((basis_ != nil) && (basis == basis_))		return true;	else		return false;}} // namespace cf_geocore