/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999-2000 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "geo-system.h"#include "geo-system-impl.h"namespace cf_geocore {objective_id_t system::add_objective(tag_t obj_tag, space_id_t space, const std::vector<locus_id_t> &participants){	return NULL;}objective_id_t system::add_objective(cf_simcore::objective_function<> *of){	objective_id_t oid = this->new_id();		objective_record *objr = new objective_record(entity_null_subtype, oid);	objr->set_default_name();	objr->set_objective(of);		sim_->add_objective(of);	entities_[oid] = objr;		if (observer_)		observer_->handle_entity_added(oid);	return oid;}bool system::has_objective(objective_id_t oid) const{	const objective_record *objr = get_record<objective_record>(oid,entities_);	return (objr != nil);}void system::remove_objective(objective_id_t oid) throw(system::entity_not_found){	entities_t::iterator p = entities_.find(oid);		if (p == entities_.end() || (p->second->get_entity_type() != entity_objective_type))		throw entity_not_found(oid);		objective_record *objr = (objective_record*)(p->second);		entities_.erase(p);		cf_simcore::objective_function<>* obj = objr->objective();	if (sim_->is_objective(obj))		sim_->remove_objective(obj);	delete objr;	if (observer_)		observer_->handle_entity_removed(oid);}cf_simcore::objective_function<> *system::get_objective(objective_id_t oid) const throw(system::entity_not_found){	const objective_record *objr = get_record<objective_record>(oid,entities_);	if (objr == nil) 		throw entity_not_found(oid);	return objr->objective();}} // namespace cf_geocore