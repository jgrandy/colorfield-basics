/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __GEO_TRANSFORM_H#define __GEO_TRANSFORM_H#include "geometry-core.h"#include "index.h"#include "vector-function-prims.h"namespace cf_geocore {template<class ROrder = reordering<3>, class COrder = reordering<3> > class rectangular_to_cylindrical {public:		// CTASSERT: reordering sizes are 3 and 3		typedef rectangular_to_cylindrical<ROrder,COrder>	this_t;		typedef three_t				result_size_t;				template<class Q, class Res>				void				apply(Res &r, const scalar_t &a, const Q &q) const;template<class Q, class DR> 				void				derive(DR &dfdq, const scalar_t &a, const Q &q) const;template<class Q, class Res, class DR>				void				apply_derive(Res &r, DR &dfdq, const scalar_t &a, const Q &q) const;		  const result_size_t		result_size(const index_t &qs) const					{ AC_PRECONDITION(qs == 3) return three; }		  const result_size_t		result_size(const three_t &) const						{ return three; }				friend			std::ostream&	operator<<(std::ostream &os, const this_t &)				{ return (os << "cart-to-cyl"); }};template<class ROrder = reordering<3>, class COrder = reordering<3> >class cylindrical_to_rectangular {public:		// CTASSERT: reordering sizes are 3 and 3		typedef cylindrical_to_rectangular<ROrder,COrder>	this_t;		typedef three_t				result_size_t;template<class Q, class Res>				void				apply(Res &r, const scalar_t &a, const Q &q) const;template<class Q, class DR> 				void				derive(DR &dfdq, const scalar_t &a, const Q &q) const;template<class Q, class Res, class DR>				void				apply_derive(Res &r, DR &dfdq, const scalar_t &a, const Q &q) const;		  const result_size_t		result_size(const index_t &qs) const					{ AC_PRECONDITION(qs == 3) return three; }		  const result_size_t		result_size(const three_t &) const						{ return three; }friend			std::ostream&	operator<<(std::ostream &os, const this_t &)				{ return (os << "cyl-to-cart"); }};} // namespace cf_geocore#endif /* __GEO_TRANSFORM_H */