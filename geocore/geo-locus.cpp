/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 1999 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#include "geo-locus.h"namespace cf_geocore {point::point(const point &p, const vector_space *s, const vector_function *xform): base_t(s, s->dimensions()){	this->set(p, xform);}void point::set(const point &src, const vector_function *xform){	this->state() = scalar0;	xform->apply(this->state(), scalar1, src.state());}void segment::set(const segment &src, const vector_function *xform){	this->state() = scalar0;	xform->apply(this->state(), scalar1, src.state());}scalar_t segment::nearest_parametric_position(const point& pt) const{	const index_t d = this->dimensions();	const matrixn1 lu(this->state(),range(0,d),row_axis),				   lv(this->state(),range(d,d),row_axis);	matrixn1 m(d,one), p(d,one);	m = lv;	m -= lu;	pt.position(p);	p -= lu;		scalar_t a, b;	matrix_multiply(a, m.transpose(), p);	matrix_multiply(b, m.transpose(), m);		return a / b;}scalar_t segment::nearest_parametric_position(const cvector &pt, const cvector &lu, const cvector &lv){	cvector m(pt.height(),one), p(pt.height(),one);	m = lv;	m -= lu;	p = pt;	p -= lu;		scalar_t a, b;	matrix_multiply(a, m.transpose(), p);	matrix_multiply(b, m.transpose(), m);		return a / b;}} // namespace cf_geocore