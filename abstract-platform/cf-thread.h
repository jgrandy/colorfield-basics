/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 2000 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */// this code is derived in part from MacApp & ACS R14 Update 5// Copyright Apple Computer, Inc.#ifndef __CF_THREAD_H#define __CF_THREAD_H#include "cf-abstract-platform.h"// this code is derived in part from MacApp & ACS R14 Update 5// Copyright Apple Computer, Inc.namespace cf_abstract_platform {/*1.				2.						3.*/class thread {public:										thread(void);										thread(const thread &source);virtual									~thread(void);virtual			void					start(void) = 0;virtual			void					run(void) = 0;virtual			bool					shutdown_requested(void) const;virtual			bool					is_alive(void) const = 0;virtual			bool					is_current(void) const = 0;virtual			void					yield(void) = 0;virtual			void					suspend(void) = 0;virtual			void					resume(void) = 0;virtual			void					join(void) = 0;virtual			std::size_t				get_stack_size(void) const;virtual			bool					create_suspended(void) const;virtual			void					request_shutdown(void);protected:virtual			void					start_root(void) = 0;				bool					is_done(void) const			{ return done_; }				bool&					is_done(void)				{ return done_; }				private:				thread&					operator= (const thread&)	{ return *this; }						// add exception_ and has_exception_				bool					shutdown_requested_;				bool					done_;};} // namespace cf_thread#endif /* __CF_THREAD_H */