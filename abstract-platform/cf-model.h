/* *  James Grandy *  Colorfield Digital Media Inc. * *  Copyright (c) 2000 Colorfield Digital Media Inc. *  Copyright (c) 2014 James Grandy * *  Permission is hereby granted, free of charge, to any person obtaining *  a copy of this software and associated documentation files (the "Software"), *  to deal in the Software without restriction, including without limitation *  the rights to use, copy, modify, merge, publish, distribute, sublicense, *  and/or sell copies of the Software, and to permit persons to whom the Software *  is furnished to do so, subject to the following conditions: * *  The above copyright notice and this permission notice shall be included in *  all copies or substantial portions of the Software. * *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */#ifndef __CF_MODEL_H#define __CF_MODEL_H#include "cf-abstract-platform.h"#include <cstdint>#include <set>namespace cf_abstract_platform {/*1.				2.						3.*/template<typename Key>class model {public:		typedef model<Key>				this_t;		typedef observer<Key>			observer_t;		typedef Key						key_t;												model(void);										model(const this_t &source);virtual									~model(void);							// Keys														// Observers				void					add_observer(observer_t &obs) const;				void					remove_observer(observer_t &obs) const;				bool					has_observer(observer_t &obs) const;				protected:virtual			void					observer_added(observer_t &obs) const;virtual			void					observer_removed(observer_t &obs) const;				void					signal_change(key_t key);				private:		typedef std::set<observer_t*>	observers_t;mutable			observers_t				observers_;};template<typename Key>class observer {public:		typedef observer<Key>			this_t;		typedef model<Key>				model_t;		typedef model_t::key_t			key_t;												observer(void);										observer(const this_t &obs);virtual									~observer(void);protected:friend class model<Key>;virtual			void					model_changed(const model_t &m, const key_t &key);virtual			void					observing_model(const model_t &m);virtual			void					not_observing_model(const model_t &m);};} // namespace cf_abstract_platform#endif /* __CF_MODEL_H */